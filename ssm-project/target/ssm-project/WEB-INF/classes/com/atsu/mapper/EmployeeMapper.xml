<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atsu.mapper.EmployeeMapper">
  <resultMap id="BaseResultMap" type="com.atsu.pojo.Employee">
    <id column="employee_id" jdbcType="INTEGER" property="employeeId" />
    <result column="employee_name" jdbcType="VARCHAR" property="employeeName" />
    <result column="employee_gender" jdbcType="VARCHAR" property="employeeGender" />
    <result column="employee_age" jdbcType="INTEGER" property="employeeAge" />
    <result column="employee_email" jdbcType="VARCHAR" property="employeeEmail" />
    <result column="department_id" jdbcType="INTEGER" property="departmentId" />
  </resultMap>
  <!--  联合查询的resultMap-->
  <resultMap id="employeeAndDepartment" type="com.atsu.pojo.Employee">
    <id column="employee_id" jdbcType="INTEGER" property="employeeId" />
    <result column="employee_name" jdbcType="VARCHAR" property="employeeName" />
    <result column="employee_gender" jdbcType="VARCHAR" property="employeeGender" />
    <result column="employee_age" jdbcType="INTEGER" property="employeeAge" />
    <result column="employee_email" jdbcType="VARCHAR" property="employeeEmail" />
    <result column="department_id" jdbcType="INTEGER" property="departmentId" />
    <association property="department"
                 javaType="Department"
                 fetchType="eager"
                 select="com.atsu.mapper.DepartmentMapper.selectByPrimaryKey"
                 column="department_id">

    </association>
  </resultMap>
  <!--   /**
       * 通过主键查询员工以及它的部门
       */
      Employee selectByPrimaryKeyWithDepartment(Integer employeeId);-->
  <select id="selectByPrimaryKeyWithDepartment" resultMap="employeeAndDepartment">
    select * from  employee where employee_id=#{employeeId}
  </select>

  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    employee_id, employee_name, employee_gender, employee_age, employee_email, department_id
  </sql>
  <select id="selectByExample" parameterType="com.atsu.pojo.EmployeeExample" resultMap="employeeAndDepartment">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from employee
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from employee
    where employee_id = #{employeeId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from employee
    where employee_id = #{employeeId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.atsu.pojo.EmployeeExample">
    delete from employee
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.atsu.pojo.Employee">
    insert into employee (employee_id, employee_name, employee_gender, 
      employee_age, employee_email, department_id
      )
    values (#{employeeId,jdbcType=INTEGER}, #{employeeName,jdbcType=VARCHAR}, #{employeeGender,jdbcType=VARCHAR}, 
      #{employeeAge,jdbcType=INTEGER}, #{employeeEmail,jdbcType=VARCHAR}, #{departmentId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.atsu.pojo.Employee">
    insert into employee
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="employeeId != null">
        employee_id,
      </if>
      <if test="employeeName != null">
        employee_name,
      </if>
      <if test="employeeGender != null">
        employee_gender,
      </if>
      <if test="employeeAge != null">
        employee_age,
      </if>
      <if test="employeeEmail != null">
        employee_email,
      </if>
      <if test="departmentId != null">
        department_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="employeeId != null">
        #{employeeId,jdbcType=INTEGER},
      </if>
      <if test="employeeName != null">
        #{employeeName,jdbcType=VARCHAR},
      </if>
      <if test="employeeGender != null">
        #{employeeGender,jdbcType=VARCHAR},
      </if>
      <if test="employeeAge != null">
        #{employeeAge,jdbcType=INTEGER},
      </if>
      <if test="employeeEmail != null">
        #{employeeEmail,jdbcType=VARCHAR},
      </if>
      <if test="departmentId != null">
        #{departmentId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.atsu.pojo.EmployeeExample" resultType="java.lang.Long">
    select count(*) from employee
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update employee
    <set>
      <if test="record.employeeId != null">
        employee_id = #{record.employeeId,jdbcType=INTEGER},
      </if>
      <if test="record.employeeName != null">
        employee_name = #{record.employeeName,jdbcType=VARCHAR},
      </if>
      <if test="record.employeeGender != null">
        employee_gender = #{record.employeeGender,jdbcType=VARCHAR},
      </if>
      <if test="record.employeeAge != null">
        employee_age = #{record.employeeAge,jdbcType=INTEGER},
      </if>
      <if test="record.employeeEmail != null">
        employee_email = #{record.employeeEmail,jdbcType=VARCHAR},
      </if>
      <if test="record.departmentId != null">
        department_id = #{record.departmentId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update employee
    set employee_id = #{record.employeeId,jdbcType=INTEGER},
      employee_name = #{record.employeeName,jdbcType=VARCHAR},
      employee_gender = #{record.employeeGender,jdbcType=VARCHAR},
      employee_age = #{record.employeeAge,jdbcType=INTEGER},
      employee_email = #{record.employeeEmail,jdbcType=VARCHAR},
      department_id = #{record.departmentId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.atsu.pojo.Employee">
    update employee
    <set>
      <if test="employeeName != null">
        employee_name = #{employeeName,jdbcType=VARCHAR},
      </if>
      <if test="employeeGender != null">
        employee_gender = #{employeeGender,jdbcType=VARCHAR},
      </if>
      <if test="employeeAge != null">
        employee_age = #{employeeAge,jdbcType=INTEGER},
      </if>
      <if test="employeeEmail != null">
        employee_email = #{employeeEmail,jdbcType=VARCHAR},
      </if>
      <if test="departmentId != null">
        department_id = #{departmentId,jdbcType=INTEGER},
      </if>
    </set>
    where employee_id = #{employeeId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.atsu.pojo.Employee">
    update employee
    set employee_name = #{employeeName,jdbcType=VARCHAR},
      employee_gender = #{employeeGender,jdbcType=VARCHAR},
      employee_age = #{employeeAge,jdbcType=INTEGER},
      employee_email = #{employeeEmail,jdbcType=VARCHAR},
      department_id = #{departmentId,jdbcType=INTEGER}
    where employee_id = #{employeeId,jdbcType=INTEGER}
  </update>
</mapper>